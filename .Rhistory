new_x_val <- stack_x$pop()
new_x <- c(new_x, new_x_val)
print(new_x_val)
}
if(sum(new_x == x) != length(x))
sum <- sum + new_x[ceiling(length(new_x)/2)]
}
##Question 2 -----------------------------------------------------------------------
sum <- 0
for(x in manuals) {
stack_x <- stack$new()
while(length(x) > 1) {
n <- x[1]
#grab all elements after
rest <- x[(which(x == n)+1):length(x)]
#grab all elements permitted after
permitted <- rules$after[which(rules$before == n)]
#check all there is in the rest is permitted
correct <- (sum(rest %in% permitted) == length(rest))
#add to stack if correct
if(correct) {
stack_x$push(n)
#eliminate from x
x <- setdiff(x, n)
} else {
#find the violating number
pair <- rest[!(rest %in% permitted)]
#push both to stack
stack_x$push(pair)
stack_x$push(n)
#eliminate both from x
x <- setdiff(x, c(n, pair))
}
}
stack_x$push(x)
#make into vector
new_x_val <- stack_x$pop()
new_x <- new_x_val
while(stack_x$size > 0) {
#tryCatch({new_x_val <- stack_x$pop()}, error=function(e) {new_x_val <- NULL})
new_x_val <- stack_x$pop()
new_x <- c(new_x, new_x_val)
print(new_x_val)
}
if(sum(new_x == x) != length(x))
sum <- sum + new_x[ceiling(length(new_x)/2)]
}
##Question 2 -----------------------------------------------------------------------
sum <- 0
for(x in manuals) {
stack_x <- stack$new()
while(length(x) > 1) {
n <- x[1]
#grab all elements after
rest <- x[(which(x == n)+1):length(x)]
#grab all elements permitted after
permitted <- rules$after[which(rules$before == n)]
#check all there is in the rest is permitted
correct <- (sum(rest %in% permitted) == length(rest))
#add to stack if correct
if(correct) {
stack_x$push(n)
#eliminate from x
x <- setdiff(x, n)
} else {
#find the violating number
pair <- rest[!(rest %in% permitted)]
#push both to stack
stack_x$push(pair)
stack_x$push(n)
#eliminate both from x
x <- setdiff(x, c(n, pair))
}
}
stack_x$push(x)
#make into vector
new_x_val <- stack_x$pop()
new_x <- new_x_val
while(stack_x$size() > 0) {
#tryCatch({new_x_val <- stack_x$pop()}, error=function(e) {new_x_val <- NULL})
new_x_val <- stack_x$pop()
new_x <- c(new_x, new_x_val)
print(new_x_val)
}
if(sum(new_x == x) != length(x))
sum <- sum + new_x[ceiling(length(new_x)/2)]
}
sum
x=manuals[[4]]
stack_x <- stack$new()
while(length(x) > 1) {
n <- x[1]
#grab all elements after
rest <- x[(which(x == n)+1):length(x)]
#grab all elements permitted after
permitted <- rules$after[which(rules$before == n)]
#check all there is in the rest is permitted
correct <- (sum(rest %in% permitted) == length(rest))
#add to stack if correct
if(correct) {
stack_x$push(n)
#eliminate from x
x <- setdiff(x, n)
} else {
#find the violating number
pair <- rest[!(rest %in% permitted)]
#push both to stack
stack_x$push(pair)
stack_x$push(n)
#eliminate both from x
x <- setdiff(x, c(n, pair))
}
}
stack_x$push(x)
#make into vector
new_x_val <- stack_x$pop()
new_x <- new_x_val
while(stack_x$size() > 0) {
#tryCatch({new_x_val <- stack_x$pop()}, error=function(e) {new_x_val <- NULL})
new_x_val <- stack_x$pop()
new_x <- c(new_x, new_x_val)
print(new_x_val)
}
new_x
sum(new_x == x)
new_x == x
sum
sum <- sum + new_x[ceiling(length(new_x)/2)]
sum
##Question 2 -----------------------------------------------------------------------
sum <- 0
for(x in manuals) {
stack_x <- stack$new()
while(length(x) > 1) {
n <- x[1]
#grab all elements after
rest <- x[(which(x == n)+1):length(x)]
#grab all elements permitted after
permitted <- rules$after[which(rules$before == n)]
#check all there is in the rest is permitted
correct <- (sum(rest %in% permitted) == length(rest))
#add to stack if correct
if(correct) {
stack_x$push(n)
#eliminate from x
x <- setdiff(x, n)
} else {
#find the violating number
pair <- rest[!(rest %in% permitted)]
#push both to stack
stack_x$push(pair)
stack_x$push(n)
#eliminate both from x
x <- setdiff(x, c(n, pair))
}
}
stack_x$push(x)
#make into vector
new_x_val <- stack_x$pop()
new_x <- new_x_val
while(stack_x$size() > 0) {
#tryCatch({new_x_val <- stack_x$pop()}, error=function(e) {new_x_val <- NULL})
new_x_val <- stack_x$pop()
new_x <- c(new_x, new_x_val)
}
if(sum(new_x == x) != length(x))
sum <- sum + new_x[ceiling(length(new_x)/2)]
}
sum
x
##Question 2 -----------------------------------------------------------------------
sum <- 0
for(x in manuals) {
stack_x <- stack$new()
while(length(x) > 1) {
n <- x[1]
#grab all elements after
rest <- x[(which(x == n)+1):length(x)]
#grab all elements permitted after
permitted <- rules$after[which(rules$before == n)]
#check all there is in the rest is permitted
correct <- (sum(rest %in% permitted) == length(rest))
#add to stack if correct
if(correct) {
stack_x$push(n)
#eliminate from x
x <- setdiff(x, n)
} else {
#find the violating number
pair <- rest[!(rest %in% permitted)]
#push both to stack
stack_x$push(pair)
stack_x$push(n)
#eliminate both from x
x <- setdiff(x, c(n, pair))
}
}
stack_x$push(x)
#make into vector
new_x_val <- stack_x$pop()
new_x <- new_x_val
while(stack_x$size() > 0) {
#tryCatch({new_x_val <- stack_x$pop()}, error=function(e) {new_x_val <- NULL})
new_x_val <- stack_x$pop()
new_x <- c(new_x, new_x_val)
}
print(x)
print(new_x)
if(sum(new_x == x) != length(x))
sum <- sum + new_x[ceiling(length(new_x)/2)]
}
##Question 2 -----------------------------------------------------------------------
sum <- 0
for(x in manuals) {
stack_x <- stack$new()
x_copy <- x
while(length(x) > 1) {
n <- x[1]
#grab all elements after
rest <- x[(which(x == n)+1):length(x)]
#grab all elements permitted after
permitted <- rules$after[which(rules$before == n)]
#check all there is in the rest is permitted
correct <- (sum(rest %in% permitted) == length(rest))
#add to stack if correct
if(correct) {
stack_x$push(n)
#eliminate from x
x <- setdiff(x, n)
} else {
#find the violating number
pair <- rest[!(rest %in% permitted)]
#push both to stack
stack_x$push(pair)
stack_x$push(n)
#eliminate both from x
x <- setdiff(x, c(n, pair))
}
}
stack_x$push(x)
#make into vector
new_x_val <- stack_x$pop()
new_x <- new_x_val
while(stack_x$size() > 0) {
#tryCatch({new_x_val <- stack_x$pop()}, error=function(e) {new_x_val <- NULL})
new_x_val <- stack_x$pop()
new_x <- c(new_x, new_x_val)
}
print(x_copy)
print(new_x)
if(sum(rev(new_x) == x_copy) != length(x))
sum <- sum + new_x[ceiling(length(new_x)/2)]
}
##Question 2 -----------------------------------------------------------------------
sum <- 0
for(x in manuals) {
stack_x <- stack$new()
x_copy <- x
while(length(x) > 1) {
n <- x[1]
#grab all elements after
rest <- x[(which(x == n)+1):length(x)]
#grab all elements permitted after
permitted <- rules$after[which(rules$before == n)]
#check all there is in the rest is permitted
correct <- (sum(rest %in% permitted) == length(rest))
#add to stack if correct
if(correct) {
stack_x$push(n)
#eliminate from x
x <- setdiff(x, n)
} else {
#find the violating number
pair <- rest[!(rest %in% permitted)]
#push both to stack
stack_x$push(pair)
stack_x$push(n)
#eliminate both from x
x <- setdiff(x, c(n, pair))
}
}
stack_x$push(x)
#make into vector
new_x_val <- stack_x$pop()
new_x <- new_x_val
while(stack_x$size() > 0) {
#tryCatch({new_x_val <- stack_x$pop()}, error=function(e) {new_x_val <- NULL})
new_x_val <- stack_x$pop()
new_x <- c(new_x, new_x_val)
}
print(x_copy)
print(new_x |> rev())
if(sum(rev(new_x) == x_copy) != length(x))
sum <- sum + new_x[ceiling(length(new_x)/2)]
}
sum
##Question 2 -----------------------------------------------------------------------
sum <- 0
for(x in manuals) {
stack_x <- stack$new()
x_copy <- x
while(length(x) > 1) {
n <- x[1]
#grab all elements after
rest <- x[(which(x == n)+1):length(x)]
#grab all elements permitted after
permitted <- rules$after[which(rules$before == n)]
#check all there is in the rest is permitted
correct <- (sum(rest %in% permitted) == length(rest))
#add to stack if correct
if(correct) {
stack_x$push(n)
#eliminate from x
x <- setdiff(x, n)
} else {
#find the violating number
pair <- rest[!(rest %in% permitted)]
#push both to stack
stack_x$push(pair)
#stack_x$push(n)
#eliminate both from x
x <- setdiff(x, pair)
}
}
stack_x$push(x)
#make into vector
new_x_val <- stack_x$pop()
new_x <- new_x_val
while(stack_x$size() > 0) {
#tryCatch({new_x_val <- stack_x$pop()}, error=function(e) {new_x_val <- NULL})
new_x_val <- stack_x$pop()
new_x <- c(new_x, new_x_val)
}
print(x_copy)
print(new_x |> rev())
if(sum(rev(new_x) == x_copy) != length(x))
sum <- sum + new_x[ceiling(length(new_x)/2)]
}
x
x
#bubble sort
x = manuals[[1]]
for(i in 1:length(x)) {
for(j in 1:(length(x)-i-1)) {
permitted <- rules$after[which(rules$before == x[j])]
#check adjacent elements are in the intended order
if(!(x[j+1] %in% permitted)) {
temp <- x[j]
x[j] <- x[j+1]
x[j+1] <- temp
}
}
}
x
manuals[1]
#bubble sort
x = manuals[[1]]
for(i in 1:length(x)) {
for(j in 1:(length(x)-i)) {
permitted <- rules$after[which(rules$before == x[j])]
#check adjacent elements are in the intended order
if(!(x[j+1] %in% permitted)) {
temp <- x[j]
x[j] <- x[j+1]
x[j+1] <- temp
}
}
}
x
x = manuals[[1]]
x
swap_performed <- TRUE
while (swap_performed) {
swap_performed <- FALSE
for (i in 1:(length(x) - 1)) {
permitted <- rules$after[which(rules$before == x[i])]
if (!(x[i+1] %in% permitted)) {
# Swap elements that are not in increasing order
tmp <- x[i]
x[i] <- x[i + 1]
x[i + 1] <- tmp
# Now record that a swap was performed
swap_performed <- TRUE
}
}
}
x
x = manuals[[4]]
x
swap_performed <- TRUE
while (swap_performed) {
swap_performed <- FALSE
for (i in 1:(length(x) - 1)) {
permitted <- rules$after[which(rules$before == x[i])]
if (!(x[i+1] %in% permitted)) {
# Swap elements that are not in increasing order
tmp <- x[i]
x[i] <- x[i + 1]
x[i + 1] <- tmp
# Now record that a swap was performed
swap_performed <- TRUE
}
}
}
x
x = manuals[[6]]
x
swap_performed <- TRUE
while (swap_performed) {
swap_performed <- FALSE
for (i in 1:(length(x) - 1)) {
permitted <- rules$after[which(rules$before == x[i])]
if (!(x[i+1] %in% permitted)) {
# Swap elements that are not in increasing order
tmp <- x[i]
x[i] <- x[i + 1]
x[i + 1] <- tmp
# Now record that a swap was performed
swap_performed <- TRUE
}
}
}
x
#implement
sum <- 0
for(x in manuals) {
#check for correctness
correct <- TRUE
i <- 1
while(correct & i < length(x)) {
n <- x[i]
#grab all elements after
rest <- x[(which(x == n)+1):length(x)]
#grab all elements permitted after
permitted <- rules$after[which(rules$before == n)]
#check all there is in the rest is permitted
correct <- (sum(rest %in% permitted) == length(rest))
i <- i+1
}
#add to sum
if(!correct) {
#bubble sort it
swap_performed <- TRUE
#loop through until they are all in order
while (swap_performed) {
swap_performed <- FALSE
for (i in 1:(length(x) - 1)) {
permitted <- rules$after[which(rules$before == x[i])]
if (!(x[i+1] %in% permitted)) {
#if not ordered correctly, swap
tmp <- x[i]
x[i] <- x[i + 1]
x[i + 1] <- tmp
swap_performed <- TRUE
}
}
}
#select the middle element and add to tally
sum <- sum + x[ceiling(length(x)/2)]
}
}
sum
input <- readLines("day_5/input.txt")
#sorting rules
rules <- grep("|", input, value = TRUE)
rules <- strsplit(rules, split = "|", fixed = TRUE)
rules <- lapply(rules, as.numeric)
rules <- do.call(rbind.data.frame, rules)
colnames(rules) <- c("before", "after")
#manuals to sort
manuals <- grep(",", input, value = TRUE)
manuals <- strsplit(manuals, split = ",", fixed = TRUE)
manuals <- lapply(manuals, as.numeric)
#implement
sum <- 0
for(x in manuals) {
#check for correctness
correct <- TRUE
i <- 1
while(correct & i < length(x)) {
n <- x[i]
#grab all elements after
rest <- x[(which(x == n)+1):length(x)]
#grab all elements permitted after
permitted <- rules$after[which(rules$before == n)]
#check all there is in the rest is permitted
correct <- (sum(rest %in% permitted) == length(rest))
i <- i+1
}
#add to sum
if(!correct) {
#bubble sort it
swap_performed <- TRUE
#loop through until they are all in order
while (swap_performed) {
swap_performed <- FALSE
for (i in 1:(length(x) - 1)) {
permitted <- rules$after[which(rules$before == x[i])]
if (!(x[i+1] %in% permitted)) {
#if not ordered correctly, swap
tmp <- x[i]
x[i] <- x[i + 1]
x[i + 1] <- tmp
swap_performed <- TRUE
}
}
}
#select the middle element and add to tally
sum <- sum + x[ceiling(length(x)/2)]
}
}
sum
